gfxreconstruct (0.9.18+39~rc2-1lunarg20.04-1) focal; urgency=medium

  [ locke-lunarg ]
  * Bugfix for using real handles

 -- john <john@odin>  Sun, 26 Mar 2023 12:24:46 -0600

gfxreconstruct (0.9.18+39~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Andrew Cox - LunarG ]
  * Correct JSON Output of Handles Represented as uint64_t (#942)
  * Removed Subscript of Potentially Empty Vector (#957)
  * Windows ARM64 Build for D3D12 Branch (#940)

  [ David Donaldson ]
  * Restore previous behavior of `gfxrecon.py capture`

  [ locke-lunarg ]
  * Set version to 0.9.18

  [ bradgrantham-lunarg ]
  * disable win dbg popup if GFXRECON_NO_DEBUG_POPUP is enabled value (#897)
  * add a deprecated version of capture (#964)
  * use script's actual name (#963)

  [ Andrew Cox - LunarG ]
  * Fixed UtcString Months (#969)
  * Documented GFXReconstruct PR Process (#968)

  [ David Donaldson ]
  * Limit amount of mem used to read/write trim state
  * Use STATE_COMMON to read/write resource data
  * Set C++ standard to 17
  * Remove use of deprecated `std::codecvt`
  * Store HandleId for swapchain buffer in info struct

  [ Locke Lin ]
  * Generate code for video extensions

  [ locke-lunarg ]
  * Parse video.xml to generate Std code
  * Initialize output struct pNext

  [ igorbrsn ]
  * update replayer script to get realtime output (#974)

  [ locke-lunarg ]
  * Fix dx12 code generations

  [ bradgrantham-lunarg ]
  * add missing overrides (#987)

  [ Andrew Cox ]
  * Function to Check Whether a Device is UMA
  *  Caching UMA Feature of Devices

  [ bradgrantham-lunarg ]
  * add notes about disabling D3D12 support (#988)

  [ David Donaldson ]
  * Unify DX12/Vulkan capture manager mutex use
  * Fix CaptureManager's shared mutex
  * Rename `CaptureManager::state_mutex_`

  [ Brad Grantham ]
  * fixup generated code for video extension calls

  [ bradgrantham-lunarg ]
  * don't do some find_package depending on platform (#986)

  [ Andrew Cox ]
  * Final Plumbing of Device4::CreateReservedResource1 for Encode
  * Noted SDK env var Needed for DX12 Codegen
  * Fixed CreateCreate typos and Regenerated for DX12

  [ locke-lunarg ]
  * Update headers to 1.3.241
  * Set version to 0.9.19

  [ bradgrantham-lunarg ]
  * avoid sync val error in virtual swapchain Blit (#1000)

  [ igorbrsn ]
  * Util function to store deactive adapters (#977)

  [ Andrew Cox ]
  * Escaped Strings in JSON Header

  [ igorbrsn ]
  * Registry driver version info (#970)

  [ Víctor Manuel Jáquez Leal ]
  * Fix JSON generated on Array2DMatrixToString

  [ Andrew Cox ]
  * More Robust Unit Tests for UtcString() Function
  * Removed VkPerformanceCounterResultKHR ToString

  [ locke-lunarg ]
  * Use BOTTOM_OF_PIPE for swapchain image

  [ Andrew Cox ]
  * Updated CMake Min Version and Project

  [ locke-lunarg ]
  * Bugfix: GetWrappedId access handle, not wrapper
  * Use real handles, not fake(wrapper addresses)
  * Clean up wrap/unwrap code
  * Add template<Wrapper> to fix 32-bit error
  * Change map to unordered_map
  * Bugfix: Get TempCommandPoolId by temp handle
  * Update headers to 1.3.243

  [ Mark Young ]
  * Replay: Add ignorable extensions

 -- john <john@odin>  Wed, 22 Mar 2023 13:21:10 -0600

gfxreconstruct (0.9.17+4~rc4-1lunarg20.04-1) focal; urgency=medium

  [ bradgrantham-lunarg ]
  * add a deprecated version of capture (#964)
  * use script's actual name (#963)

  [ Andrew Cox - LunarG ]
  * Fixed UtcString Months (#969)

 -- john <john@odin>  Thu, 26 Jan 2023 13:24:48 -0700

gfxreconstruct (0.9.17+4~rc3-1lunarg20.04-1) focal; urgency=medium

  [ John Zupin ]
  * packaging: debian: don't build gfxrecon with d3d12 support

 -- john <john@odin>  Wed, 25 Jan 2023 11:32:06 -0700

gfxreconstruct (0.9.17+4~rc2-1lunarg20.04-1) focal; urgency=medium

  [ David Donaldson ]
  * Restore previous behavior of `gfxrecon.py capture`

 -- john <john@odin>  Wed, 25 Jan 2023 08:32:45 -0700

gfxreconstruct (0.9.17+4~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Dustin Graves ]
  * Add method call block type to file format
  * Add method call support for capture
  * Add method call support for replay
  * Add GetApiCallFamily utility function
  * Add D3D12 dispatch tables
  * Add proxy capture DLLs
  * Add system DLL import libs
  * Link proxy DLLs with system DLL copies
  * Remove unused variable

  [ locke-lunarg ]
  * Add DX ApiCall id
  * Add extenral data CppHeaderParser
  * Generate encode header
  * Generate encode body
  * Add dx12_api_call_encoders into CMakeList

  [ Rodrigo Urra ]
  * Move D3D12-related DLLs into their own folders

  [ Dustin Graves ]
  * Add CMake option for D3D12
  * Fix 32-bit build error with generated DX12 code

  [ locke-lunarg ]
  * Python code style description
  * Remove registry
  * Refactor encoder
  * Separate shared code from Vulkan code generation
  * Generate decode header
  * Generate decode body
  * Generate struct decoders
  * Add decoder code into CMakeList
  * Generate consumer header
  * Add consumer code into CMakeList
  * Generate replay consumer header
  * Generate replay consumer body
  * Generate ascii consumer
  * Add replay code into CMakeList
  * Custom union struct
  * Use COM_Outptr to check object or void
  * Check null in AddObject

  [ Rodrigo Urra ]
  * Implement infrastructure to launch, inject, and hook into D3D12 apps

  [ locke-lunarg ]
  * Move DX12CppClass
  * Custom LARGE_INTEGER union
  * Remove union code generation

  [ Dustin Graves ]
  * Refactor DX dispatch tables
  * Add DX12 dispatch tables to TraceManager
  * Move HandleUnwrapMemory to generic file

  [ locke-lunarg ]
  * Change DX12 to Dx12
  * Use triple double quotes for docstring and move to inside
  * Use lower_case_with_underscores
  * Remove # noqa
  * Add PEP8 style yapf config
  * Python code style
  * Format by yapf
  * Fix flake8 issues
  * Remove import *

  [ Rodrigo Urra ]
  * Improve control over when to hook into DXGI/D3D12 libraries

  [ Dustin Graves ]
  * Initial IUnknown wrapper and utilities
  * Basic D3D12 class wrapper generation
  * Initial code gen for wrapper creation functions

  [ locke-lunarg ]
  * Simplify encode object generation and move to custom
  * Change encode parameter return to string

  [ Rodrigo Urra ]
  * Hookup CreateProcess and improve launcher
  * Address review comments
  * Apply clang-format

  [ Locke Lin ]
  * Code generation
  * Change python format
  * TrackManager to CaptureManager
  * ReplayOptions to VulkanReplayOptions
  * custom_encoder_commands to custom_vulkan_encoder_commands
  * MetaDataType to MetaDataId

  [ igorbrsn ]
  * Virtual address mapping

  [ Rodrigo Urra ]
  * Move comments to header file

  [ Dustin Graves ]
  * Add functions to unwrap objects in structs
  * fixup! Add functions to unwrap objects in structs
  * Add QueryInterface wrapping
  * Add WrapObject calls to wrapper codegen

  [ igorbrsn ]
  * clean info messages from VA mapping test

  [ Dustin Graves ]
  * Remove duplicate CMakeLists.txt entries
  * Add object unwrapping to wrapper codegen
  * Add stack count for wrapped functions
  * Generate struct object unwrapping
  * Unwrap arrays of objects

  [ locke-lunarg ]
  * Add VSCode workspace & set python3 for VK
  * Remove redundant space
  * Undo naming change
  * Move EncodeObject into ParameterEncoder
  * Fix win32 handle bug

  [ Dustin Graves ]
  * Integrate wrappers with proxy DLLs
  * Add codegen for parameter encoding
  * Add parameter encoding to IUnknown_Wrapper
  * Add wrapper destructor
  * Prevent duplicate wrapper creation

  [ locke-lunarg ]
  * Use EncodeObjectPtr for Dx object**

  [ igorbrsn ]
  * unordered_map implemetation for wrap objects

  [ Dustin Graves ]
  * Add custom pre/post call actions
  * Split custom encoder commands file
  * Enable D3D12 replay

  [ locke-lunarg ]
  * Add configuration .json files
  * Fix replay generation bug

  [ David Donaldson ]
  * Consolidate common DLL initialization code

  [ igorbrsn ]
  * jenkinsfile added in order to trigger CI build

  [ locke-lunarg ]
  * Give Decoded_Struct value
  * Add ReadFromSubresource\WriteToSubresource to list
  * Add replay external object

  [ Dustin Graves ]
  * Add decode allocator begin/end for member funcs

  [ locke-lunarg ]
  * Replay map array objects
  * Set DxObject is format::HandleId

  [ Rodrigo Urra ]
  * Hookup detours code to object wrappers

  [ locke-lunarg ]
  * Give decoded_value of return_value

  [ Dustin Graves ]
  * Disable GetWindowsSystemLibrariesPath for Linux
  * Use format::HandleId with custom struct decoders

  [ igorbrsn ]
  * Igor jenkins test

  [ locke-lunarg ]
  * Use platform_types.json
  * Set win32 handle as void*

  [ Rodrigo Urra ]
  * Address static code analysis bug

  [ Dustin Graves ]
  * Add D3D12 object info structs
  * Use wrapper with pre/post calls
  * Rename custom encoder to custom wrapper commands
  * Move wrapper constructor/desctructor to body
  * Add custom wrapper destroy commands
  * Add wrapper map utilities
  * Pass wrapped objects to param encode functions
  * Add mapped memory tracking
  * Add tex3d subresource size calculation

  [ locke-lunarg ]
  * Add dx12_object_mapping_util
  * Add dx12_struct_object_mappers
  * Use is_dx12_class() instead given type
  * Call MapStructObjects in replay consumer

  [ igorbrsn ]
  * Replay overrides for swapchain creation

  [ Dustin Graves ]
  * Add replay info structures
  * Provide info structs to replay overrides
  * Add replay object reference tracking
  * Add swapchain replay info
  * Implement mapped memory writes for replay

  [ locke-lunarg ]
  * Run AllocateOutputData() before GetOutputPointer()
  * Run AllocateOutputData() before override function

  [ David Donaldson ]
  * Rename TraceManager to CaptureManager
  * Duplicate CaptureManager to Vulkan and D3D12 files
  * Create Vulkan and D3D12 CaptureManager classes
  * Cleanup CaptureManager and D3D12CaptureManager
  * Cleanup VulkanCaptureManager
  * Rename CaptureManager::*Trace functions to *Capture
  * Misc CaptureManager code cleanup

  [ Dustin Graves ]
  * Add conversion check for map memory copy size
  * Fix swapchain replay info intialization
  * Add replay handle unwrapping for unions

  [ locke-lunarg ]
  * Wrap objects in struct

  [ Dustin Graves ]
  * Remove D3D12 condition from util test main
  * Add missing headers to DX12 decoder
  * Use base functions with capture unwrap codegen
  * Handle recursive struct declarations in codegen
  * Add descriptor heap info tracking for replay
  * Add descriptor address mapping functions

  [ igorbrsn ]
  * silence extra email notification

  [ David Donaldson ]
  * Make CaptureManager members private with accessors

  [ Dustin Graves ]
  * Use size_t encoding rules with size_t types
  * Add GPU VA mapping for replay
  * Add D3D12 frame delimiters

  [ Locke Lin ]
  * Map CPU and GPU descriptors
  * Add pRenderTargetDescriptors into ARRAY_SIZE_LIST
  * Move Map functions into dx12_object_mapping_util
  * Map CPU & GPU in struct
  * Generate generated_dx12_struct_wrappers

  [ igorbrsn ]
  * GetWriteWatch tests

  [ Locke Lin ]
  * Modify underscore class_name
  * Add capture overrides

  [ Dustin Graves ]
  * Add blacklist support for DX function/method calls
  * Add custom CheckFeatureSupport implementation

  [ Rodrigo Urra ]
  * Implement process hopping across different bitness apps

  [ Locke Lin ]
  * Fix MapObjects issue

  [ Dustin Graves ]
  * Add replay HWND mapping
  * Add overrides for fence signal/wait replay

  [ Rodrigo Urra ]
  * Add option to enable D3D12 debug layer for capture

  [ Dustin Graves ]
  * Fix forward decode struct declarations

  [ igorbrsn ]
  * CI build fix

  [ Locke Lin ]
  * Print HRESULT string

  [ David Donaldson ]
  * Rename ReplayOptions to VulkanReplayOptions
  * Add ReplayOptions and DxReplayOptions
  * Add more utils to find instance layers/extensions
  * Parse --validate replay option
  * Enable gfxrecon-replay arg --validate for Vulkan
  * Enable gfxrecon-replay arg --validate for DX12
  * Add validate arg to usage and Android gfxrecon.py

  [ Dustin Graves ]
  * Add custom D3D12_PIPELINE_STATE_STREAM_DESC encode
  * Add D3D12_PIPELINE_STATE_STREAM_DESC unwrap/map
  * Return valid event for memory budget notification
  * Skip desc offset calc for start addr

  [ Locke Lin ]
  * Add fatal error handler

  [ igorbrsn ]
  * Mapped memory modification tracking with GetWriteWatch

  [ Dustin Graves ]
  * Silence some GpuVaMap info messages
  * Release active objects on exit
  * Release unused objects at replay

  [ David Donaldson ]
  * Encode API family with meta data type
  * Add --api argument to replay to select replay APIs
  * Fixup D3D gfxrecon-replay option naming

  [ Locke Lin ]
  * Use string literals instead of macros

  [ Dustin Graves ]
  * Restrict memory tracking to UPLOAD heaps
  * Updates for persistent memory page guard mode
  * Replay fence sync updates

  [ igorbrsn ]
  * overrides for heap and commit resources in capture manager

  [ Dustin Graves ]
  * Write watch updates
  * Add OpenExistingHeapFromAddress support

  [ Locke Lin ]
  * Encapsulate descriptor CPU and GPU address mapping
  * Move collect_struct_with_objects to base
  * Add objects that are in struct
  * Rename k2 ,v2 to class_name, class_value

  [ Dustin Graves ]
  * Move wrapped objects to IUnknown_Wrapper
  * Remove Wrapper template type from utils
  * Simplify wrapper creators
  * Destroy object info before release on replay

  [ Locke Lin ]
  * Merge StructAddObject into struct_object_mappers

  [ Dustin Graves ]
  * Cleanup Dx12DescriptorMap includes
  * Minor codegen fixes

  [ Locke Lin ]
  * Add some missing MapStructObjects

  [ Dustin Graves ]
  * Implement replay --sync option
  * Pre-wrap swapchain images
  * Add full DxInfoObject initalization for overrides
  * Keep swapchain image replay info active
  * Resize replay window when buffers are resized
  * New descriptor mapping technique
  * Remove unused descriptor mapping utilities
  * Report descriptor increment size error
  * Add templates for common cpu/gpu descriptor ops
  * Fail pipeline library operations
  * Skip failed pipeline library calls on replay
  * Fix heap/resource overrides
  * Add resource info init for more API calls
  * Add utility func to check for disable write watch

  [ igorbrsn ]
  * Style and unit tests in Jenkins

  [ Locke Lin ]
  * Add omit_output_data
  * Give StructPointerDecoder to override functions

  [ Dustin Graves ]
  * Use EncodeStructArray2D for ppGeometryDescs
  * Fix WStringArrayDecoder string decoding
  * Add GPU VA mapping funcs for black listed structs
  * Manage replay object extra info with unique_ptr
  * Add wait idle for replay exit

  [ Locke Lin ]
  * Change multi-thread to single

  [ Rodrigo Urra ]
  * Remove capture-time virtual address ranges from GpuVaMap
  * Address review comments
  * Improve warnings coming from GpuVaMap.
  * Make catch() blocks take in a const ref

  [ Locke Lin ]
  * Add missing MapStructObjects
  * Add D3D12_STATE_SUBOBJECT encode/decode
  * Add D3D12_STATE_SUBOBJECT unwrap/map

  [ Rodrigo Urra ]
  * Enable debug layer without removing devices

  [ Dustin Graves ]
  * Reference existing D3D12_STATE_SUBOBJECT
  * Use custom heap settings with write watch
  * Use custom CreateHeap settings for write watch
  * Report original heap properties with write watch
  * Check GetBuffer result for SC image pre-acquire

  [ igorbrsn ]
  * Jenkins limit number of builds archives in CI

  [ Dustin Graves ]
  * Track queue wait/signal dependency
  * Update --sync for outstanding queue waits
  * Compare fence wait/signal values with <=
  * Add event wait utility function

  [ David Donaldson ]
  * Fix possible inf wait in OverrideGetCompletedValue

  [ Dustin Graves ]
  * Alternate va mapping implementation
  * Add get/set utilities for replay object info

  [ igorbrsn ]
  * Grouping gfx dlls
  * Debug message layer

  [ Locke Lin ]
  * Run dx12 ascii consumer
  * Parse d3d12sdklayers.h
  * Add convert enum/IID to text
  * Print more detail function calls

  [ David Donaldson ]
  * Add state table for Dx12 object wrappers
  * Add file structure for DX12 state tracking

  [ Locke Lin ]
  * Add IDXGIFactory5::CheckFeatureSupport to custom
  * Custom ascii ID3D12Device_CheckFeatureSupport
  * Only print the value

  [ David Donaldson ]
  * Add state tracking for DX12 objects
  * Move the per-API call shared lock
  * Add state tracking for OpenExistingHeapFromAddress

  [ Rodrigo Urra ]
  * Apply different trace setting defaults per API

  [ igorbrsn ]
  * Filter debug messages

  [ David Donaldson ]
  * Track all create calls and object ref counts
  * Track D3D12 debug objects
  * Track descriptor and descriptor heap state
  * Write and replay data contents for some resources

  [ davidd-lunarg ]
  * Wait for command queues to idle before writing state

  [ David Donaldson ]
  * Track fence signal and event state

  [ Locke Lin ]
  * Add object type in toascii
  * Trim generate write empty in toascii

  [ David Donaldson ]
  * Track command list commands
  * Misc Dx12StateWriter fixes

  [ davidd-lunarg ]
  * Track parent object wrapper info

  [ Rodrigo Urra ]
  * Address overflow bug in GPU VA map

  [ Locke Lin ]
  * Generate AddEntry functions for object wrappers
  * Generate state table
  * Integrate return name into return_value
  * Encode ShaderIdentifier as VoidArray
  * Map ShaderIdentifier

  [ Rodrigo Urra ]
  * Update third party licenses file

  [ David Donaldson ]
  * Add GFXRECON_ASSERT macro and CMake opt to disable
  * Add DX12 com ptr typedefs to graphics util class
  * Use queue->GetDevice() for tracking device obj
  * Track resource barrier state transitions

  [ Brad Grantham ]
  * Remove TODO

  [ Dror Smolarsky ]
  * Improvement to the capture script

  [ bradgrantham-lunarg ]
  * Revert "Improvement to the capture script"

  [ Dror Smolarsky ]
  * Lint and style fixes to the capture script
  * Add printout of capture process output to capture script tool
  * Add a an option to the capture script to set the layer path
  * Fix an issue with setting the capture layer path

  [ Locke Lin ]
  * Remove "Remove" implementation in Dx12ShaderIdMap
  * Avoid importing reg error

  [ David Donaldson ]
  * Write open command lists last in trim state block
  * Add DX12 resource data utility

  [ Locke Lin ]
  * Capture trimming swapchain info
  * Replay trimming swapchain info

  [ Rodrigo Urra ]
  * Enable support for DX12 DRED in the replayer

  [ xooi ]
  * Add DX12ResourceTrackingConsumer class
  * Rename dx12 resource consumer class and variable name and formatting.
  * change the constant variable name for two pass replay.
  * Change DX12ResourceTrackingConsumer to DX12TrackingConsumer.
  * rename "resource tracking" to "tracking"
  * Change define naming in tracking consumer header.
  * formattting dx12 tracking consumer file.

  [ Rodrigo Urra ]
  * Add SetBreadcrumbContextEnablement() to DRED initialization for capture
  * Enable DRED for capture via environment variable

  [ David Donaldson ]
  * Use GetCurrentBackBuffer when writing state
  * Capture and replay resource data for trim state
  * Remove unnecessary unmap warning
  * Track descriptor copies for trimming
  * Fix subresource size calculation in resource util
  * Cleanup descriptor tracking code
  * Track reserved resources

  [ igorbrsn ]
  * Screenshot write to disk

  [ Locke Lin ]
  * Track objects in command and ignore invalid for writing

  [ bradgrantham-lunarg ]
  * Add issue templates for capture and replay failure

  [ David Donaldson ]
  * Don't capture resource data for accel structs

  [ Locke Lin ]
  * Toascii print bits enum

  [ David Donaldson ]
  * Track & replay swapchain buffer sizes for trimming

  [ Locke Lin ]
  * Toascii print 0 value of bits enum

  [ xooi ]
  * Add frame number for GFXR DX12 Ascii dump.

  [ Locke Lin ]
  * Track descriptors in command
  * Track descriptors in create resource and ignore writting

  [ David Donaldson ]
  * Fix command list resource id check
  * Fix tracking for command list reset
  * Fix AddTransitionBarrier
  * Store descriptor resource ids in static array

  [ Locke Lin ]
  * Trimming for enable debug layer

  [ Rodrigo Urra ]
  * Implement capture-time screenshots for validation

  [ igorbrsn ]
  * DXGI_FORMAT set for supported formats

  [ xooi ]
  * Add check for descriptor resources in state write

  [ Locke Lin ]
  * Fix decode ptr ptr struct

  [ David Donaldson ]
  * Track swap chain buffers
  * Update internal buffer state after ResizeBuffers
  * Create state objects after root sig in trim state

  [ Locke Lin ]
  * Trimming for EnableDRED

  [ igorbrsn ]
  * Changed label for the build machine

  [ Locke Lin ]
  * Trimming fps info
  * Ascii print nullptr if handle is 0

  [ David Donaldson ]
  * Check for invalid source in CopyDescriptors
  * CPU copy upload and readback heap resource data
  * ResourceDataUtil: make target resource resident

  [ Brad Grantham ]
  * move end paren in DumpPresentWithFrameNumber so it always is printed

  [ Locke Lin ]
  * Trmming ID3D12Device1::SetResidencyPriority
  * Trimming SetPrivateData

  [ Brad Grantham ]
  * Don't print output structs for encoded calls with result != S_OK
  * Use D3D12_GPU_DESCRIPTOR_HANDLE verbatim

  [ David Donaldson ]
  * Don't try to CPU copy data of reserved resources
  * Clear descriptor resource tracking on creation
  * Evict resources after copying data for state write

  [ Rodrigo Urra ]
  * Further validate playback by creating dummy resources and heaps

  [ igorbrsn ]
  * Changing Jenkins retention rule for artifacts

  [ Locke Lin ]
  * All creations using StandardCreateWrite
  * Trimming: Remove priority info when release

  [ David Donaldson ]
  * Check for empty source in CopyDescriptors
  * Add a capture option to report DXR unsupported

  [ Brad Grantham ]
  * add --discard-cached-psos option forcing CachedPSO to nullptr

  [ David Donaldson ]
  * Process all pending waits for a fence signal

  [ igorbrsn ]
  * Artifacts path changing

  [ PatrickPurcell ]
  * Setting dx12 enum to string
  * Setting up dx12_struct_to_string
  * Setting up dx12 ascii consumer
  * Setting up object type output
  * Stubbing out custom dx12 ascii consumer handlers
  * Setting up ascii consumer
  * Setting up custom dx12 to string
  * Setting up codegen for dx12 to ascii
  * Setting up custom api call handlers
  * Clearing todos in ascii consumer generator
  * Clearing todos in dx12 struct generation
  * Rearranging output
  * Updating formatting
  * Setting up custom ToString handlers

  [ Locke Lin ]
  * GetWrappedId to GetDx12WrappedId

  [ PatrickPurcell ]
  * General cleanup

  [ David Donaldson ]
  * Track GPUVA dependencies for ConstantBufferViews

  [ PatrickPurcell ]
  * General cleanup

  [ David Donaldson ]
  * Check for valid GPUVA before writing command list

  [ PatrickPurcell ]
  * Merging base
  * General cleanup
  * Fixing bigobj compilation failure and missing quotes around manually implemented enum output
  * Addressing code review
  * General cleanup
  * General cleanup
  * Rearranging method/function output

  [ patrick-lunarg ]
  * Fixing quotes around enum array elements
  * Cleaning up pipeline library output

  [ Rodrigo Urra ]
  * Check against null desc for CBV create

  [ Locke Lin ]
  * Fix merge error

  [ Rodrigo Urra ]
  * Fix lost device when taking screenshots with wrong queue

  [ David Donaldson ]
  * Store a copy of the IID instead of a reference

  [ Locke Lin ]
  * Decoder gives ApiCallInfo to consumer
  * Support Dx12 wsi context

  [ patrick-lunarg ]
  * Merging with base
  * General cleanup
  * Fix Build After Bad Merge

  [ bradgrantham-lunarg ]
  * Revert "Fix Build After Bad Merge"

  [ patrick-lunarg ]
  * Fixing Linux build
  * Fixing Windows build
  * Fixiung Windows build
  * Fixing closing header guard

  [ Brad Grantham ]
  * add option to increase object limit for generated dx12 ascii consumer

  [ patrick-lunarg ]
  * Setting up toascii output for IUnknown out parameters

  [ Locke Lin ]
  * Add --force-windowed replay option

  [ Brad Grantham ]
  * fix spelling of toStriingFlags

  [ xooi ]
  * Update dx12 generator scripts to support Win10 SDK 10.0.20348.1

  [ Locke Lin ]
  * Generate code
  * VkFlags64's enum need a diffferent way to print
  * Merge bug fix
  * MapStructObjects D3D12_GPU_VIRTUAL_ADDRESS

  [ David Donaldson ]
  * Reset command allocator in Dx12ResourceDataUtil
  * Don't map resources on upload heap for reading
  * Add callback function to QueueSyncEventInfo
  * Add additional com ptr typedefs
  * Optionally return resource_id in Dx12GpuVaMap::Map
  * Remove unused mapping util functions
  * Interface changes to the Dx12ShaderIdMap
  * Add overrides to be used for DXR & ExecuteIndirect

  [ patrick-lunarg ]
  * patrick-to-ascii-decode-handle-fix

  [ David Donaldson ]
  * Track values to map in ExecuteIndirect resources
  * Map values in resources used by ExecuteIndirect
  * Track values to map when copied between resources
  * Refactor resource value copy loop
  * Map GPU VAs for acceleration struct builds
  * Map shader IDs in ray tracing shader tables

  [ igorbrsn ]
  * Retrieve executable file info

  [ David Donaldson ]
  * Parse info for values contained in root signatures
  * Parse shader ID to local root sig associations
  * Map shader record local root sig values

  [ igorbrsn ]
  * Encode and decode executable info

  [ David Donaldson ]
  * Copy LRS resource value infos into shader id map

  [ igorbrsn ]
  * Warning of replay name mismatch
  * propogate warning of mismatch replayer name to replay consumers

  [ feimao-gfxr ]
  * Redundant D3D12 PSO optimization

  [ David Donaldson ]
  * Add option to pad reported accel struct size
  * Add documentation for D3D12 capture options
  * Use UINT for GFXRECON_ACCEL_STRUCT_PADDING option

  [ Rodrigo Urra ]
  * Warn on AS size mismatch between capture and replay
  * Add a warning if user tries to trim a DXR workload

  [ feimao-gfxr ]
  * Redundant D3D12 PSO optimization, fixing issues in the previous PR

  [ igorbrsn ]
  * Decoder early exit to make metadata retrieval faster
  * jenkinsfile update credentials
  * Add param to gfxrecon-info to only fetch exe info

  [ Rodrigo Urra ]
  * Enable gfxrecon-compress for D3D12

  [ David Donaldson ]
  * Remove warning if no accel struct padding option
  * Track GPU VAs to allow lookup of resource from VA
  * Track the creating wrapper for all create methods
  * Add utils to 1) create a buffer and 2) get a device

  [ JerryAMD ]
  * Application defined LRS in DXIL.

  [ David Donaldson ]
  * Add calls to GetShaderIdentifier to trim state
  * Promote align util function to platform util

  [ igorbrsn ]
  * update jenkinsfile for CI

  [ David Donaldson ]
  * Track info for build acceleration struct commands
  * Track AS sizes and handle overlapping builds
  * Don't wait forever for queues to idle on exit
  * Compute AS build data input sizes
  * Copy AS build input data to tracking resource
  * Track unique ID for each accel struct
  * Add ref to AS inputs resource for pending builds
  * Add the framework for tracking accel struct copies
  * Track accel struct copies
  * Write accel struct data to trim state
  * Track and recreate root sig when needed for SO
  * Decode handling for init DX12 accel struct cmds
  * Replay trimmed accel structs builds

  [ igorbrsn ]
  * Move capture and replay screenshots to pre-present

  [ Bob Ellison ]
  * scripts: add keyframes.py

  [ David Donaldson ]
  * Add resource barriers for copying AS inputs data

  [ igorbrsn ]
  * App swapchain dimensions in gfxrecon-info
  * Complete early exit

  [ JerryAMD ]
  * Fixed DXR sample playback recapture trace file issue

  [ David Donaldson ]
  * Build toascii when D3D12 is built

  [ Rodrigo Urra ]
  * Add missing compressor codepath for init subresource
  * Add renaming script
  * Add another safeguard before deleting renamed replayer

  [ igorbrsn ]
  * Acceleration structure compressor for DXR trimmed

  [ David Donaldson ]
  * Fix asserts hit in Dx12StateWriter
  * Take replay screenshots using swap chain's queue
  * Take capture screenshots using swap chain's queue

  [ igorbrsn ]
  * Separate gfxrecon-info stat gathering and printing

  [ David Donaldson ]
  * Fix assert in Dx12ResourceValueMapper

  [ JerryAMD ]
  * Removed unnecessary Fence creation

  [ Rodrigo Urra ]
  * Simplification of end-user capture requirements

  [ igorbrsn ]
  * gfxrecon-info fixed --exe-info-only option

  [ David Donaldson ]
  * Set block index for all block types
  * Move duplicated func GetExtraInfo() to shared file

  [ Ming Zheng ]
  * Fix GetResourceTiling capture crash

  [ David Donaldson ]
  * Add util to track FillMemCmd src for DXR data
  * Track resources values from mulitple fill cmds
  * Fix decoded block index to be 0-based

  [ Rodrigo Urra ]
  * Make info tool display whether there is a DXR workload

  [ David Donaldson ]
  * Interface changes for Dx12ResourceValueTracker
  * Define file format for optimized DXR data
  * Refactor DX12 specific optimizer code
  * Add Dx12ResourceValueTracker consumer to optimizer
  * Use value tracker data to write DXR optimized file
  * Reduce memory usage when optimizing for DXR
  * Decode FillMemoryResourceValueCommand
  * Move ownership of shader id map to replay consumer
  * Process fill mem resource value command in replay
  * Use new meta data command to optimize DXR replay

  [ Rodrigo Urra ]
  * Add adapter info into captures

  [ David Donaldson ]
  * Fix issue when synchronizing cmd list executions

  [ feimao-gfxr ]
  * discard_cached_psos will be true for creating Dx12ResourceValueTrackingConsumer.

  [ David Donaldson ]
  * Add DXR optimization support for trimmed captures
  * Check res type to avoid unneeded optimize tracking

  [ Rodrigo Urra ]
  * Track software adapters

  [ igorbrsn ]
  * update renaming script

  [ feimao-gfxr ]
  * Apply API detection to Optimizer and Info.
  * Fix: Optimizer outputs new file if nothing needed to be optimized

  [ igorbrsn ]
  * add optimizer rename script

  [ feimao-gfxr ]
  * Check resource_value_mapper_ before using it. It can be null pointer.

  [ igorbrsn ]
  * update jenkinsfile

  [ Rodrigo Urra ]
  * Bring optimizer usage output back up-to-date
  * Small grammar fix for optimizer usage

  [ igorbrsn ]
  * add adapter info to consumer via ProcessDxgiAdapterInfo

  [ Rodrigo Urra ]
  * Cleanup info usage output
  * Cleanup renaming scripts usage output
  * Cleanup toascii usage output
  * Separate common/Vulkan/D3D12 options usage output

  [ Ming Zheng ]
  * Handling ID3D12Resource::Map when ppData is null
  * Add support for WriteToSubresource

  [ igorbrsn ]
  * Driver versioning added to captures and gfxrecon-info

  [ feimao-gfxr ]
  * The --dcp as default for the replay for DXR optimization scan was removed by another PR by mistake. Resume it.

  [ JerryAMD ]
  * Add environment variable GFXRECON_CAPTURE_IUNKNOWN_WRAPPING

  [ feimao-gfxr ]
  * Separate PSO scan pass and DXR optimization scan pass

  [ Rodrigo Urra ]
  * Allow PSO scan to detect if DXR opt is required

  [ JerryAMD ]
  * Batch copies for trimmed captures

  [ Rodrigo Urra ]
  * Show DXR-optimization state in gfxrecon-info
  * Add documentation for D3D12

  [ igorbrsn ]
  * update artifacts with readme files

  [ Rodrigo Urra ]
  * Fix info tool adapter spacing
  * Issue warning when unsupported objects are created

  [ igorbrsn ]
  * update optimizer renaming script

  [ Rodrigo Urra ]
  * Update doc to reflect usage of gfxrecon-optimize-renamed.py

  [ igorbrsn ]
  * Updated optimize rename script

  [ David Donaldson ]
  * Fix load of trim state resource values for DXR opt
  * Don't write trim descriptor create for invalid AS

  [ JerryAMD ]
  * Multi adapters support

  [ David Donaldson ]
  * Null check optional pDesc struct arg before use

  [ igorbrsn ]
  * message for old traces without driver info

  [ Brad Grantham ]
  * remove spurious toascii brackets due to Vulkan consumer
  * only emit newline after first record

  [ igorbrsn ]
  * added to build script option to specify SDK

  [ JerryAMD ]
  * Replay full-screen trimmed trace file crash.

  [ igorbrsn ]
  * Insure the input and output paths wrapped in quotes

  [ JerryAMD ]
  * Allow gfxrecon-replay to select GPU adapter via --gpu option
  * Info tool says trimmed captures of DXR 1.1 trace file don't contain DXR work.
  * Track and restore added to state obj dependencies

  [ igorbrsn ]
  * Compression support for FillMemoryResourceValueCommands
  * disable assert in release
  * to string generator update
  * rename capture script to capture-vulkan

  [ Rodrigo Urra ]
  * Add the number of extra dummy frames to info tool

  [ David Donaldson ]
  * Add support for ExecuteIndirect DispatchRays
  * Check for valid shader identifier before mapping

  [ Rodrigo Urra ]
  * Warn when catching empty resource info

  [ JerryAMD ]
  * Implement ID3D12CommandList support

  [ Rodrigo Urra ]
  * Write and read Agility SDK version to/from captures
  * Manual conflict resolution and code fixes to make GFXR functional
  * Attempt Linux build fix
  * Fix Linux build
  * Fix Linux build
  * Remove application null-check
  * Address some code review items
  * Restore AcquireUniqueStateLock() for D3D12 capture
  * Address review comments
  * Sync up the licenses from ThirdParty.txt and README.md

  [ JerryAMD ]
  * Change unknown IID to debug message.

  [ Rodrigo Urra ]
  * Remove DX12 TODO identifiers

  [ igorbrsn ]
  * Optionally disable D3D12 support

  [ Rodrigo Urra ]
  * Add support for Agility SDK 606.4

  [ igorbrsn ]
  * D3D12 support for Convert as experimental

  [ David Donaldson ]
  * Cleanup Dx12ResourceValueTracker interface
  * Move Dx12ResourceValueTrackingConsumer to new file
  * Add experimental DXR optimizer

  [ JerryAMD ]
  * Remove Injected Barriers from Trim Capture

  [ Rodrigo Urra ]
  * Remove straggling issue number

  [ igorbrsn ]
  * Add "+dx12" to GFXRECON_PROJECT_VERSION_SHA1
  * Fix build issue with convert when dx12 is disabled

  [ Rodrigo Urra ]
  * Fix D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS warning
  * Warn users if a capture has not been optimized

  [ David Donaldson ]
  * Clean up DXR-related log messages
  * Manually resolve merge conflicts

  [ Brad Grantham ]
  * Add some lines lost in merge

  [ Rodrigo Urra ]
  * Remove some URL references

  [ Andrew Cox - LunarG ]
  * Support for 64 bit Enums and Flag sets in Convert (#905)

  [ bradgrantham-lunarg ]
  * Fixup generated code from #905 (#927)
  * block EXT_shader_module_identifier (#906)

  [ Tatsuyuki Ishi ]
  * Don't write signal for zero valued timeline semaphores (#908)

  [ Andrew Cox - LunarG ]
  * Convert: Handling for non-void non-VkResult return (#913)

  [ Brad Grantham ]
  * use ubuntu-18.04 image for building release packages

  [ David Donaldson ]
  * Add usage info about required Agility SDK runtime

  [ bradgrantham-lunarg ]
  * Package up DX12 artifacts and clean up (#946)
  * package up the new API-specific USAGE files (#952)

  [ John Zupin ]
  * packaging: debian: update copyright

  [ David Donaldson ]
  * Update readme with DXR recapture requirements

  [ bradgrantham-lunarg ]
  * Use GetInstanceProcAddr for SetDebugUtilsObject{Name,Tag} (#948)

  [ Locke Lin ]
  * Update headers to 1.3.238

  [ Andrew Cox - LunarG ]
  * Check for Zero Render Target Descriptor Count (#939)

  [ locke-lunarg ]
  * Update headers to 1.3.239

 -- john <john@odin>  Mon, 23 Jan 2023 13:01:53 -0700

gfxreconstruct (0.9.15+111~rc1-1lunarg20.04-1) focal; urgency=medium

  [ bradgrantham-lunarg ]
  * Revert 885 (#923)

  [ Andrew Cox - LunarG ]
  * Update Vulkan-Headers to 1.3.236 (#919)

  [ bradgrantham-lunarg ]
  * Revert "send all except kCommandSeverity and kAlwaysSeverity to stderr (#873)" (#926)

 -- john <john@odin>  Thu, 08 Dec 2022 13:15:41 -0700

gfxreconstruct (0.9.15+82~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Brad Grantham ]
  * fix spelling

  [ bradgrantham-lunarg ]
  * remove unused option (#857)

  [ Brad Grantham ]
  * Update header to 1.3.231

  [ Andrew Cox ]
  * Changed JSON index from functions to all blocks.

  [ Panagiotis Apostolou ]
  * Hush compiler warning

  [ Locke Lin ]
  * Trimming vkSetLocalDimmingAMD

  [ Panagiotis Apostolou ]
  * Lazily resize tracked swapchain images vector

  [ Locke Lin ]
  * Print info even if frame number is 0

  [ Panagiotis Apostolou ]
  * Lazily resize tracked swapchain images vector (#866)

  [ davidd-lunarg ]
  * Reserve format::MetaDataType values for future use (#871)

  [ Andrew Cox - LunarG ]
  * Annotate Captures With Layer Version (#869)

  [ Panagiotis Apostolou ]
  * Toggle trimmed capture on Android at runtime

  [ Andrew Cox - LunarG ]
  * Expand Operation Annotation With a Timestamp Field (#874)

  [ Panagiotis Apostolou ]
  * Make signal handler watcher thread more configurable

  [ bradgrantham-lunarg ]
  * don't skip block_index_ increment for FrameDelimiter (#878)

  [ Locke Lin ]
  * Update VulkanMemoryAllocator to v3.0.1
  * Fix for 32-bit
  * Run AcquireNextImage Before QueuePresent

  [ Mike Schuchardt ]
  * Don't warn on empty integer value

  [ Locke Lin ]
  * Add USAGE_TRANSFER_SRC when trimming

  [ bradgrantham-lunarg ]
  * send all except kCommandSeverity and kAlwaysSeverity to stderr (#873)

  [ Locke Lin ]
  * Choose lower apiVersion for VMA

  [ Panagiotis Apostolou ]
  * Use single Android property to control run time trimming

  [ Locke Lin ]
  * Keep HandleWrappers for invalid handles
  * Track WrapperHandles for release in the ending

  [ Tatsuyuki Ishi ]
  * Optimize generated ToString compilation performance (#887)

  [ Andrew Cox - LunarG ]
  * Documented some ToString Templates (#899)
  * Added a Quote Function to Wrap Strings in Quotes (#900)

 -- john <john@odin>  Thu, 01 Dec 2022 09:40:42 -0700

gfxreconstruct (0.9.15+81~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Brad Grantham ]
  * remove mention of VS2015, add VS2022

  [ Dustin Graves ]
  * Initial virtual swapchain implementation

  [ Locke Lin ]
  * Fix VirtualSwapchain crash
  * Add option --virtual-swapchain
  * Replace virtual images in QueuePresent
  * Bugfix for trimming virtual swapchain
  * Bugfix for sreenshots virtual swapchain
  * Eusure Queue and Cmdbuf are the same queue family
  * Set PRESENT_SRC for virtual swapchain image
  * Move ToString to util
  * Add QueueFamilyIndices to create swapchain image
  * Move ProcessSetSwapchainImageStateCommand to virtual swapchain
  * Remove QueueWaitIdle for virtual swapchain
  * Set virtual swapchain as default
  * Combine two CmdPipelineBarrier
  * LunarG copyright to 2022

  [ bradgrantham-lunarg ]
  * move addition of EXTERNAL_MEMORY_CAPABILITIES to CreateInstance (#770)

  [ Panagiotis Apostolou ]
  * Fix in gfxrecon.py script for virtual swapchain (#774)

  [ Locke Lin ]
  * BugFix: If it only calls GetSwapchainImages once

  [ Andrew Cox ]
  * Toascii Switched to Traversing Decoded_ Structs Part 1 of 3
  * Toascii Switched to Traversing Decoded_ Structs Part 2 of 3
  * Toascii Switched to Traversing Decoded_ Structs Part 3 of 3

  [ Locke Lin ]
  * Usage: --use-captured-swapchain-indice

  [ Andrew Cox - LunarG ]
  * Output Addresses From Capture for void* and Opaque Struct* Parameters (#787)
  * Documented Parallel build via build.py (#788)
  * Output Addresses From Capture for void* and Opaque* Struct Members (#789)
  * Changed Pointers to Functions to Output in hex (#795)

  [ Locke Lin ]
  * Adjust MemoryRequirements
  * Trimming VK_KHR_get_surface_capabilities2

  [ Andrew Cox - LunarG ]
  * Convert Handles to Strings using Common Path for Arguments and Members (#800)

  [ bradgrantham-lunarg ]
  * Fix crashes when Android surface can't be opened (#796)

  [ Brad Grantham ]
  * add g++ to Fedora dependencies

  [ bradgrantham-lunarg ]
  * warn in case of corrupt descriptor update template encoding (#804)
  * create and use CreateHardwareBufferCommandHeader2 (#797)

  [ Brad Grantham ]
  * warn if deprecated CreateHardwareBufferCommandHeader is decoded

  [ bradgrantham-lunarg ]
  * warn instead of fatal on different image index (#805)

  [ Brad Grantham ]
  * fix typo ; Visual Studio 2012 to 2022

  [ Locke Lin ]
  * PrivateData handle unwrapped and duplicated

  [ Dror Smolarsky ]
  * Add an option to the capture script use a capture layer in a given directory (#581)

  [ Andrew Cox - LunarG ]
  * toascii - Minimal Change to Enable JSON Lines Output - Nested Body (#811)

  [ bradgrantham-lunarg ]
  * don't assert on non-decoded and print null instead of "" (#815)
  * print null if the passed array was actually nullptr (#817)

  [ Locke Lin ]
  * Bigfix: Get shaderGroupHandleCaptureReplaySize value
  * Capture for deferred operation
  * Trimming for deferred operation
  * Switch end_can_clear_ on DecodeAllocator
  * Custom Decode_vkCreateRayTracingPipelinesKHR
  * Replay for deferred operation

  [ bradgrantham-lunarg ]
  * Add braces around if statement block

  [ Locke Lin ]
  * Reject VK_NVX_binary_import

  [ Andrew Cox - LunarG ]
  * Heading Level Corrected (#821)

  [ Andrew Cox ]
  * Toascii - Rearranged Cases in ToString<decode::Decoded_VkWriteDescriptorSet>
  * Toascii - Strip "[out]" Prefix From Variable Names

  [ Panagiotis Apostolou ]
  * Introducing a signal handler watcher thread
  * Check resource binding alignment when page guard is in use
  * Refactor GetSystemPageSize() out of PageGuardManager

  [ Andrew Cox ]
  * Documented ownership of VulkanAsciiConsumerBase::file_
  * Toascii - Header Line with source, and file, project, vulkan versions
  * Renamed gfxrecon-toascii to gfxrecon-convert
  * Heading Consistency

  [ Locke Lin ]
  * Surface and format could be NULL
  * data is nullptr to cause fail. Skip it.

  [ bradgrantham-lunarg ]
  * Update vulkan_state_writer.cpp
  * don't dereference a possibly null pointer (#839)

  [ Panagiotis Apostolou ]
  * Fix for android trimmed replay stats

  [ bradgrantham-lunarg ]
  * Revert "Add an option to the capture script use a capture layer in a given directory (#581)" (#844)

  [ Locke Lin ]
  * Trimming vkTrimCommandPool
  * Trimming vkSetPrivateData
  * Bugfix: Clear container before Copy
  * Replay VkDeviceGroupDeviceCreateInfo
  * Save replay_device_group in DeviceInfo

  [ Brad Grantham ]
  * fix usage message spacing

  [ Andrew Cox ]
  * Document gfxrecon-convert and JSON Lines Format
  * JSON String Escaping
  * Changed null pointer representation to null
  * Convert - Changed Default Extension to jsonl

  [ Locke Lin ]
  * Free virtual swapchain by VulkanResourceAllocator

  [ Illia Polishchuk ]
  * Add VkImportMemoryHostPointerInfoEXT replaying support (#803)

  [ bradgrantham-lunarg ]
  * add blurb about appropriate use (#854)

  [ Andrew Cox - LunarG ]
  * Add Convert to gfxrecon.py and Enable it in Build (#852)

  [ Brad Grantham ]
  * Update header to 1.3.231

  [ John Zupin ]
  * packaging: update patches

 -- john <john@odin>  Tue, 18 Oct 2022 13:21:54 -0600

gfxreconstruct (0.9.11+61~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Panagiotis Apostolou ]
  * Fix for multiple android surfaces workaround
  * Track protected queues creation when capturing and replaying trimmed
  * Correct check of mmap's return value

  [ bradgrantham-lunarg ]
  * use the metadatapointer for the loop index (#727)

  [ Panagiotis Apostolou ]
  * Make SetRayTracingShaderGroupHandlesCommandHeader`s size constant
  * Unblock SIGSEGV everytime a memory protection is applied on a region
  * Documenting a known issue of the page guard mechanism

  [ bradgrantham-lunarg ]
  * write an empty buffer if AHB map fails and print some debug info (#730)

  [ Andrew Cox - LunarG ]
  * Noted need to run python code gen after submodule update (#711)
  * Screen out Unsupported Device Extensions (#733)
  * Declared default for setting. (#740)

  [ Brad Grantham ]
  * fix spelling error

  [ Panagiotis Apostolou ]
  * Fix for race condition - deadlock
  * Keep same usage flags for AHB when replaying

  [ bradgrantham-lunarg ]
  * also catch base exception and print what() (#750)

  [ David Donaldson ]
  * Reserve format::MetaDataType values for future use
  * Prevent size_t from being used in capture format

  [ Locke Lin ]
  * Update header to 1.3.224
  * Set version to 0.9.15

 -- john <john@odin>  Tue, 16 Aug 2022 09:56:37 -0600

gfxreconstruct (0.9.11+42~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Brad Grantham ]
  * remove toascii reference from USAGE_desktop.md
  * remove unused variable

  [ Panagiotis Apostolou ]
  * Issue-506: Fix for XCloseDisplay segfaults
  * issue-515: Picking wrong physical device when multiple are present

  [ Locke Lin ]
  * Trimming VK_KHR_synchronization2

  [ bradgrantham-lunarg ]
  * add new option --omit-null-hardware-buffers (#694)

  [ Brad Grantham ]
  * make message about omitting NULL AHardwareBuffer* INFO

  [ Andrew Cox ]
  * Updated Catch2 Header to Latest

  [ panos-lunarg ]
  * add measurement framerange support (#697)

  [ Brad Grantham ]
  * Set version to 0.9.13

  [ bradgrantham-lunarg ]
  * add CreateHardwareBuffer at the earliest reference to an AHardwareBuffer (#704)

  [ Brad Grantham ]
  * WARN just once if AHB is not found

  [ bradgrantham-lunarg ]
  * Update header to 1.3.215 (#706)

  [ Brad Grantham ]
  * Set version to 0.9.14

  [ bradgrantham-lunarg ]
  * Update header to 1.3.216 (#708)
  * Provide a GetPhysicalDeviceProcAddr function (#713)
  * restore vk_layerGetPhysicalDeviceProcAddr entry in procaddr table (#714)

 -- john <john@odin>  Thu, 09 Jun 2022 10:42:14 -0600

gfxreconstruct (0.9.11+24~rc2-1lunarg20.04-1) focal; urgency=medium

  [ Brad Grantham ]
  * update some copyright dates

 -- john <john@odin>  Fri, 15 Apr 2022 11:32:29 -0600

gfxreconstruct (0.9.11+24~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Locke Lin ]
  * Update header to 1.3.211

 -- john <john@odin>  Mon, 11 Apr 2022 13:51:36 -0600

gfxreconstruct (0.9.11+23~rc1-1lunarg20.04-1) focal; urgency=medium

  [ David Pinedo ]
  * gfxrecon-toascii: Remove extra 0x when printing handles and pointers (#680)

  [ Locke Lin ]
  * Set version to 0.9.12
  * Update header to 1.3.209
  * Update header to 1.3.210

 -- john <john@odin>  Fri, 01 Apr 2022 11:32:58 -0600

gfxreconstruct (0.9.11+21~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Brad Grantham ]
  * pass the layer name downchain to EnumerateDeviceExtensionProperties
  * fix member naming to match the convention

  [ patrick-lunarg ]
  * Debugging Android test failure

  [ PatrickPurcell ]
  * Revert "Debugging Android test failure"

  [ patrick-lunarg ]
  * Adding toascii output cmd line argument

  [ Locke Lin ]
  * Trimming: VK_KHR_buffer_device_address
  * Bugfix: Record pNext in DescriptorInfo
  * Remove enumutil::GetResultValueString

  [ Brad Grantham ]
  * fix unprintable character

  [ patrick-lunarg ]
  * Making IsArgumentSet() act like IsOptionSet()
  * Rearranging logic that sets arguments_present_

  [ Brad Grantham ]
  * update usage
  * update usage for toascii --output

  [ patrick-lunarg ]
  * Setting up ApiCallInfo during file processing parent 1e34f08c46a86260875172056da96461f48e1191 author patrick-lunarg <patrick@lunarg.com> 1645220761 -0800 committer patrick-lunarg <patrick@lunarg.com> 1645564445 -0800

  [ David Pinedo ]
  * Added omissions to layer manifest and vk_layer_settings.txt

  [ Brad Grantham ]
  * use name from source PR
  * restore trimming with NONE compression
  * temporarily disable toascii
  * restore hash as filename suffix for shader replacement
  * clarify errors for disabled file compression module

  [ Carl Ritson ]
  * Add option to limit hotkey captures to a specific frame count

  [ Brad Grantham ]
  * use static_cast consistent with existing codebase

  [ Locke Lin ]
  * Fix compiling with gcc11

  [ Brad Grantham ]
  * remove unsequenced modification and access

  [ Locke Lin ]
  * Set version to 0.9.12
  * Update header to 1.3.209

 -- john <john@odin>  Tue, 29 Mar 2022 14:59:35 -0600

gfxreconstruct (0.9.10+37~rc1-1lunarg20.04-1) focal; urgency=medium

  [ David Pinedo ]
  * Added omissions to layer manifest and vk_layer_settings.txt

 -- john <john@odin>  Thu, 24 Feb 2022 16:02:37 -0700

gfxreconstruct (0.9.10+32~rc2-1lunarg20.04-1) focal; urgency=medium

  [ Brad Grantham ]
  * fix anchor for Android build section
  * use strcmp to compare strings and use defined constant
  * fix clang-format

  [ Locke Lin ]
  * VkFlags64's enum need a diffferent way to print
  * Update header to 1.3.204
  * Set version to 0.9.11
  * Trimming replay SurfaceCapabilities

 -- John Zupin <john@odin>  Mon, 07 Feb 2022 14:03:37 -0700

gfxreconstruct (0.9.10+32~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Tomek Bury ]
  * Add direct display support

  [ Locke Lin ]
  * Print VkStructureType string
  * Wrong error log
  * Build 32-bit in Ubuntu

  [ patrick-lunarg ]
  * Debugging Android test failure

  [ PatrickPurcell ]
  * Revert "Debugging Android test failure"

  [ patrick-lunarg ]
  * Setting up WSI selection

  [ Brad Grantham ]
  * make s_alt_stack dynamic, save and use probed size
  * Delete unused prototype

  [ patrick-lunarg ]
  * Debugging Android test failure

  [ PatrickPurcell ]
  * Revert "Debugging Android test failure"

  [ patrick-lunarg ]
  * Adding VkRenderPassCreateInfo2 handler
  * Fixing push descriptor handling for trimming
  * Clearing unrelated diff
  * Clang format
  * Clang format
  * Adding custom_vulkan_command_buffer_util.cpp to Android CMakeLists.txt
  * General cleanup
  * General cleanup
  * Clang format

  [ Locke Lin ]
  * Copy pNext structure
  * Trimming: Bind memory2
  * Trimming: Bind swapchain image memory2

  [ Brad Grantham ]
  * exit with failure if FileProcessor can't be initialized
  * fix style
  * fix spelling
  * make exit from main more consistent

  [ Locke Lin ]
  * Trimming: VK_EXT_inline_uniform_block
  * Trimming: VK_EXT_full_screen_exclusive
  * VkFlags64's enum need a diffferent way to print
  * Update header to 1.3.204
  * Set version to 0.9.11

  [ John Zupin ]
  * packaging: update copyright
  * packaging: rebased patches

 -- John Zupin <john@odin>  Thu, 03 Feb 2022 16:13:05 -0700

gfxreconstruct (0.9.10~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Locke Lin ]
  * Update header to 1.2.189
  * Set version to 0.9.9

  [ Brad Grantham ]
  * Add YAPF style file and note in CONTRIBUTING.md

  [ patrick-lunarg ]
  * Updating python formatting via yapf
  * Wrapping C++ code string literals in yapf disable/enable comments
  * Applying yapf formatting

  [ Per Inge Mathisen ]
  * Allow overriding GFXRECON_PROJECT_VERSION_DESIGNATION for custom builds.

  [ Jeffrey Yang ]
  * The queue submit info count may be 0

  [ Per Inge Mathisen ]
  * Add toolchain to make a static build for HPC clusters.

  [ Dror Smolarsky ]
  * Applying patches containing custom Vulkan registry changes

  [ patrick-lunarg ]
  * Fixing variable rename

  [ Tomek Bury ]
  * Add thread support for multi-threaded drivers

  [ patrick-lunarg ]
  * Setting up WsiContext
  * General cleanup
  * General cleanup
  * Applying clang-format
  * Revert "Applying clang-format"
  * Applying clang-format
  * Revert "Applying clang-format"
  * Applying clang-format
  * General cleanup
  * General cleanup
  * General cleanup
  * Fixing wsi context initialization
  * Converting Application from std::unique_ptr to std::shared_ptr
  * General cleanup
  * Setting up error reporting for failed WSI initialization
  * General cleanup
  * Fixing ctor declaration
  * Formatting
  * Addressing code review

  [ Michael Skorokhodov ]
  * Fix compiling with gcc11

  [ Locke Lin ]
  * Code generation
  * Change python format
  * TrackManager to CaptureManager
  * ReplayOptions to VulkanReplayOptions
  * custom_encoder_commands to custom_vulkan_encoder_commands
  * MetaDataType to MetaDataId
  * Fix for VS2015
  * Update header to 1.2.196
  * Set version to 0.9.10
  * Update header to 1.2.198
  * Fix for VK_KHR_dynamic_rendering

  [ John Zupin ]
  * packaging: rebased patches

 -- John Zupin <john@odin>  Tue, 16 Nov 2021 17:23:12 -0700

gfxreconstruct (0.9.8+21~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Locke Lin ]
  * Update header to 1.2.182

  [ Danylo Piliaiev ]
  * Limit the number of vkGetQueryPoolResults retries

  [ Mike Schuchardt ]
  * Update layer manifest file

  [ patrick-lunarg ]
  * Setting up Vulkan support for gfxrecon-toascii
  * Filtering Vulkan union members stringification based on parent structures where possible
  * Renaming variable to prevent hiding
  * Removing union ToString<>() functions for unions that are filtered by parent objects

  [ Per Inge Mathisen ]
  * Allow overriding GFXRECON_PROJECT_VERSION_DESIGNATION for custom builds.
  * Fix arm linux builds
  * Add automatic build testing for linux arm build targets

  [ patrick-lunarg ]
  * Updating documentation with toascii description and usage
  * Updating docs to specify that toascii writes to file, not stdout

  [ bradgrantham-lunarg ]
  * Revert "Add automatic build testing for linux arm build targets"
  * Revert "Fix arm linux builds"
  * Revert "Allow overriding GFXRECON_PROJECT_VERSION_DESIGNATION for custom builds."

  [ Locke Lin ]
  * Sort enumNames before generating
  * Generate StateTable and ObjectInfoTable code
  * Update header to 1.2.188
  * Copyright time to 2021

  [ patrick-lunarg ]
  * Adding instructions for building/using VVL with gfxrecon-replay on Android

  [ John Zupin ]
  * packaging: updated rules formatting

  [ Locke Lin ]
  * Update header to 1.2.189
  * Set version to 0.9.9

  [ John Zupin ]
  * packaging: update repo to reflect upstream
  * packaging: rebased patches

 -- John Zupin <john@odin>  Fri, 27 Aug 2021 17:17:15 -0600

gfxreconstruct (0.9.7+17~rc2-1lunarg20.04-1) focal; urgency=medium

  [ Danylo Piliaiev ]
  * Limit the number of vkGetQueryPoolResults retries

 -- John Zupin <john@odin>  Tue, 29 Jun 2021 13:30:47 -0600

gfxreconstruct (0.9.7+17~rc1-1lunarg20.04-1) focal; urgency=medium

  [ David Donaldson ]
  * Combine block header and data into one file write
  * Reserve space in compressed buffer for header
  * Reserve header bytes in parameter encoder
  * Use locked file writes and set write buffer size
  * Add SharedMutex reader-writer mutex util class
  * Use a shared mutex for writing trim state
  * Remove unnecesssary state tracker locking

  [ Dustin Graves ]
  * Check for headless support
  * Remove 'unassisted' memory entry on free
  * Set version to 0.9.8

  [ orbea ]
  * build: Replace NO_XCB with BUILD_WSI_XCB_SUPPORT
  * build: Allow enabling and disabling xlib and wayland support

  [ Christophe ]
  * manifest: some setting are only available on Windows

  [ Dustin Graves ]
  * Add apt-get update to Linux CI build
  * Add documentation for new page_guard settings

  [ David Donaldson ]
  * Fix a race condition and crash when done trimming

  [ Locke Lin ]
  * Update header to 1.2.182

  [ John Zupin ]
  * packaging: rebased packages

 -- John Zupin <john@odin>  Fri, 25 Jun 2021 15:33:29 -0600

gfxreconstruct (0.9.6+16~rc3-1lunarg20.04-1) focal; urgency=medium

  [ Christophe ]
  * Fix layer settings to match layer manifest schema

 -- John Zupin <john@odin>  Fri, 30 Apr 2021 12:38:30 -0600

gfxreconstruct (0.9.6+16~rc2-1lunarg20.04-1) focal; urgency=medium

  [ Mike Schuchardt ]
  * Fix vkconfig built-in variable
  * Fix FindVulkanVersion.cmake for 176

 -- John Zupin <john@odin>  Wed, 28 Apr 2021 11:02:19 -0600

gfxreconstruct (0.9.6+16~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Dustin Graves ]
  * Set version to 0.9.7

  [ David Donaldson ]
  * Suppress stdout if output to console option is off
  * Track trimmed state acquired image index
  * Link executables with /LARGEADDRESSAWARE on MSVC

  [ tomped01 ]
  * Add arm and arm64 build targets
  * Add sanity check for supported extensions
  * Add support for VK_EXT_headless_surface extension

  [ David Donaldson ]
  * Include state load time in post-replay timing info

  [ John Zupin ]
  * packaging: update debian/copyright file

  [ David Donaldson ]
  * Handle null swapchain in call to destroy swapchain

  [ Alejandro Piñeiro ]
  * Use host coherent as fallback when creating a screenshot copy resource

  [ Dustin Graves ]
  * Limit the number of vkGetEventStatus retries

  [ David Donaldson ]
  * Fix captured format for update desc template calls

  [ Christophe ]
  * Add layer settings to layer manifest

  [ Danil ]
  * Fix invalid python syntax of platform_dict initializer

  [ Dustin Graves ]
  * Add annotations to capture file format

  [ Mike Schuchardt ]
  * Update header to 1.2.176

  [ John Zupin ]
  * packaging: rebased patches

 -- John Zupin <john@odin>  Tue, 27 Apr 2021 14:40:20 -0600

gfxreconstruct (0.9.5+49~rc3-1lunarg20.04-1) focal; urgency=medium

  * packaging: update patch for build info summary

 -- John Zupin <john@odin>  Thu, 25 Feb 2021 16:43:36 -0700

gfxreconstruct (0.9.5+49~rc2-1lunarg20.04-1) focal; urgency=medium

  * packaging: updated LunarG's copyrights

 -- John Zupin <john@odin>  Thu, 25 Feb 2021 14:43:51 -0700

gfxreconstruct (0.9.5+49~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Dustin Graves ]
  * Add replay override for device group enumeration
  * Consolidate replay phys dev initialization
  * Post process enumerate device groups on capture
  * Update header to 1.2.166
  * Set version to 0.9.6
  * Make capture path relative to gfxrecon-capture cwd
  * Make gfxrecon-capture respect PATH
  * Report capture layer version
  * Update gradle version for Android build

  [ David Donaldson ]
  * Fix unhandled enum value warning on Android build
  * Add logging macros that log messages only once
  * Create static lib for common graphics code
  * Refactor common device creation code
  * Only log feature error when feature is used
  * Rename set buffer address for use with other objs
  * Save and replay accel struct device addresses
  * Save and replay device memory opaque addresses
  * Save and replay opaque address even when zero
  * Look for device address features in other struct
  * Only capture/replay addresses if feature enabled
  * Fix incorrect type used when wrapping accel struct
  * Restore header file to project sources

  [ Dustin Graves ]
  * Set extractNativeLibs in Android manifest
  * Fix replay extension tracking for -m rebind

  [ Alejandro Piñeiro ]
  * Use host coherent as fallback when creating a staging buffer

  [ David Donaldson ]
  * Add trimming support for KHR ray tracing pipelines
  * Add util to get pNext struct by type
  * Add state tracking for accel struct descriptors
  * Add support for accel struct descriptor templates
  * Warn if unsupported host accel struct is used

  [ Andres Gomez ]
  * Correct typo in gfxrecon-replay -h output

  [ amhagan ]
  * Fix VkAllocateMemory with Capture/Replay

  [ Mike Schuchardt ]
  * Add replay override for GetRandROutputDisplayEXT
  * Add trim support for mutable descriptor type
  * Add trim support for VK_KHR_timeline_semaphore
  * Fix trim state for descriptors with imm samplers
  * Update header to 1.2.170
  * Add image layout trim state for sync2

  [ David Donaldson ]
  * Add overrides for vkCreateRayTracingPipelinesKHR
  * Enable RT shader grp handle capture replay feature
  * Get capture replay rt shader handle size property
  * Refactor phys device feature and property util
  * Capture ray tracing shader group handle data
  * Replay ray tracing pipeline shader grp handle data
  * Improve dev addr/handle capture feature log msg
  * Improve dev addr/handle replay feature log msg
  * Use vkGetDeviceMemoryOpaqueCaptureAddressKHR
  * Log warning if -m rebind is used with dev addr

  [ Dustin Graves ]
  * Fix screenshot format comparison

 -- John Zupin <john@odin>  Mon, 22 Feb 2021 16:40:30 -0700

gfxreconstruct (0.9.5~rc1-1lunarg20.04-1) focal; urgency=medium

  [ Dustin Graves ]
  * Set version to 0.9.5

  [ Mike Schuchardt ]
  * Add encode/decode support for 2d arrays
  * Remove ray tracing from blacklist
  * Add encode/decode support for RT geometry union
  * Remove some warnings on RT vkWriteDescriptorSets

  [ Dustin Graves ]
  * Initial support for opaque buffer addresses

  [ David Donaldson ]
  * Enable bufferDeviceAddressCaptureReplay bit
  * Default initialize replay API version to 1.0

  [ Dustin Graves ]
  * Fix descriptor set failed alloc issue

  [ David Donaldson ]
  * Add MonotonicAllocator utility class
  * Create class interface for decode allocations
  * Use DecodeAllocator when decoding structs
  * Use DecodeAllocator when decoding pointer types
  * Use DecodeAllocater when decoding pNext structs
  * Fix unhandled enumeration values warning
  * Cleanup: remove unused variable

  [ locke-lunarg ]
  * Bug fix & Modify build.md

  [ David Donaldson ]
  * Read outer array length when decoding 2D arrays
  * Enable KHR acceleration structure wrapping

  [ Dustin Graves ]
  * Ignore checkpoint data
  * Prevent cmd.exe from closing on replay exit

  [ David Donaldson ]
  * Add logging options to gfxrecon-replay

  [ John Zupin ]
  * packaging: rebase patches

 -- John Zupin <john@odin>  Thu, 07 Jan 2021 11:53:32 -0700

gfxreconstruct (0.9.3+53-1lunarg20.04-2) focal; urgency=medium

  [ Dustin Graves ]
  * Change to MIT license
  * Remove unused code generator

 -- John Zupin <john@odin>  Mon, 14 Dec 2020 09:35:11 -0700

gfxreconstruct (0.9.3+53-1lunarg20.04-1) focal; urgency=medium

  [ Dustin Graves ]
  * Fix screenshot format conversion
  * Screenshots preserve srgb format
  * Add --screenshot-all replay option
  * Update Android gfxrecon.py script for new options
  * Update usage docs for screenshot all option
  * Store parent device ID with replay object info
  * Remove replay handle entries on destroy
  * Move handle mapping failure warning
  * Destroy active Vulkan objects on replay exit

  [ John Zupin ]
  * packaging: add optimize back in

  [ Dustin Graves ]
  * Set version to 0.9.4
  * Fix referenced resource consumer override decl
  * Add gfxrecon-optimize usage documentation
  * Add 'optimize' to gfxrecon.py valid commands

  [ Mike Schuchardt ]
  * Tweak gfxrecon-capture.py environment setup
  * Add Xlib support to gfxrecon-replay
  * Add loader for libX11.so
  * Xlib replay VK_ERROR_OUT_OF_DATE_KHR fixes
  * Close xlib replay display before vkDestroyInstance

  [ Dustin Graves ]
  * Skip vkGetPiplelineCacheData calls with --opcd
  * Update gradle version
  * Keep Android screen on while replay is active
  * Ensure orientation is set correctly for Android
  * Stop Android process on activity exit
  * Support Android replay with multiple surfaces
  * Simplify Android process termination
  * Fix AHB memory writes
  * Filter unsupported extensions on replay
  * Filter unsupported features on replay
  * Add --remove-unsupported replay option

  [ Mike Schuchardt ]
  * Load layer settings from system registry location

  [ Dustin Graves ]
  * Attempt to recover from OUT_OF_POOL_MEMORY errors
  * Fix acquire/present image index mismatch on replay
  * Use __android_log_assert for ANDROID_LOG_FATAL
  * Apply /bigobj option to VS2017 builds
  * Add generic handle unwrap/mapping utilities
  * Update codegen encode/decode for generic handles
  * Unwrap physdev handle for device tools ext
  * Set instance create info pNext callbacks on replay
  * Add handle wrapping/mapping unit tests

  [ orbea ]
  * cmake: Add BUILD_WERROR.

  [ Dustin Graves ]
  * Fix descriptor pool destroy override
  * Add direct allocation calls to resource allocator
  * Fix resource cleanup on exit

  [ Mike Schuchardt ]
  * Fix Xlib GetPhysicalDevicePresentationSupport

  [ Dustin Graves ]
  * Apply BUILD_WERROR to MSVC builds
  * Set CMake min version to 3.10.2
  * Adjust code style macro logic
  * Set log level for tests to error and above
  * Warn when a no-op function is called
  * Init allocator funcs by api version/extensions

  [ Mike Schuchardt ]
  * Update header to 1.2.162

  [ John Zupin ]
  * packaging: update copyright

 -- John Zupin <john@odin>  Tue, 08 Dec 2020 11:24:30 -0700

gfxreconstruct (0.9.2+30-1lunarg20.04-2) focal; urgency=medium

  [ Dustin Graves ]
  * Initial screenshot support
  * Add replay options for screenshots

  [ John Zupin ]
  * packaging: update section in control file
  * package: don't install gfxrecon-optimize

  [ Dustin Graves ]
  * Initial screenshot support
  * Add replay options for screenshots

 -- John Zupin <john@odin>  Thu, 01 Oct 2020 17:23:01 -0600

gfxreconstruct (0.9.2+30-1lunarg20.04-1) focal; urgency=medium

  [ Dustin Graves ]
  * Set version to 0.9.3
  * Update compress convert option handling
  * Add compression format to gfxrecon-info
  * Add meta-data block size utility func
  * Ignore wait operations for imported semaphores
  * Add replay option to sync queue submissions
  * Update usage documentation for CLI arg changes

  [ Dror Smolarsky ]
  * Changes to the build output directories
  * Remove test package generation directory overlap

  [ Mike Schuchardt ]
  * Try more names when dlopen-ing windowing libs

  [ Dustin Graves ]
  * Revert "Remove test package generation directory overlap"
  * Revert "Changes to the build output directories"
  * Refine replay layer check

  [ Dror Smolarsky ]
  * Changes to the build output directories
  * Change code style directive from macro to function

  [ Dustin Graves ]
  * Add build/install dir options to build.py
  * Update build.py 32-bit support
  * Update replay surface management
  * Track replay surfaces/swapchains with IDs
  * Fix file processor error reporting
  * Add buffer/image usage tracker for trimmed files
  * Add generator for resource reference consumer
  * Add trimmed gfxr file optimizer
  * Initial support for descriptor copies
  * Handle consecutive descriptor binding copies
  * Improve descriptor update template handling
  * Stop optimizer when state block not present
  * Update header to 1.2.154
  * Remove alternate --sync option
  * Add file conversion utility to decoder framework

 -- John Zupin <john@odin>  Mon, 28 Sep 2020 18:10:57 -0600

gfxreconstruct (0.9.1+45-1ubuntu20.04-4) focal; urgency=medium

  [ Dustin Graves ]
  * Fix invalid block id from compression convert
  * Fix resize2 block size
  * Update required package list from BUILD.md

  [ John Zupin ]
  * debian: remove README.Debian

 -- John Zupin <john@odin>  Fri, 31 Jul 2020 17:29:51 -0600

gfxreconstruct (0.9.1+45-1ubuntu20.04-3) focal; urgency=medium

  * control: add zlib compression lib to build env
  * rules: build type is now RelWithDebInfo

 -- John Zupin <john@odin>  Wed, 29 Jul 2020 18:27:40 -0600

gfxreconstruct (0.9.1+45-1lunarg20.04-2) focal; urgency=medium

  * UNRELEASED

 -- John Zupin <john@odin>  Tue, 28 Jul 2020 13:41:21 -0600

gfxreconstruct (0.9.1+45-1lunarg20.04-1) focal; urgency=medium

  [ John Zupin ]
  * patch as bionic version

  [ Dustin Graves ]
  * Ensure surfaces are destroyed on replay exit
  * Update main README for usage doc changes
  * Set version to 0.9.2
  * Add missing meta-data types to gfxrecon-compress
  * Send all Xcb atom requests together

  [ Christophe ]
  * Fix interaction with vkconfig

  [ KarenGhavam-lunarG ]
  * Add new LunarG logo to usage docs

  [ Dror Smolarsky ]
  * Add C++ lint  (using clang-tidy) build directives
  * Add clang-tidy config file
  * Add license comments to various CMakeLists files.
  * Add newline at end of framework/util/CMakeLists.txt

  [ Dustin Graves ]
  * Update versioning for tag checkouts
  * Add third party license file
  * Initial GitHub workflows
  * Add refspec option for code style check
  * Enable code style check for CI builds
  * Fix display message decode
  * Replay memory allocator changes to aid debugging
  * Add error logging for compress/decompress
  * Add option to disable abort() message box
  * Add -h option to command line utilities

  [ Mike Schuchardt ]
  * Update header to 1.2.146
  * Refine vk.xml array length processing

  [ xooi ]
  * replay: add resource tracking consumer class
  * replay: add resource tracking consumer base class
  * replay: memory portability first pass implementation
  * replay: update offsets calculation and 2nd pass replay
  * gfxrec-replay: fix resource data tracking and updates
  * replay: add get resources memory requirement calls
  * replay: add --enable-mutipass-replay-portabolity|--emrp
  * replay: fix utility function pointer reference
  * replay: update binding offset calculation for 2 pass replay
  * replay: update --emrp argument option usage

  [ Dustin Graves ]
  * Remove resource tracking code gen
  * Add handle IDs to resource allocator create calls
  * Add const to tracked object info get methods
  * Add custom allocator for binding adjustment
  * Handle allocations with no bindings for realign

  [ John Zupin ]
  * copyright: updated for release

  [ Dustin Graves ]
  * Add constant for null handle IDs
  * Add missing license text
  * Add bind2 support to realign allocator
  * Add flush/invalidate realign support
  * Use pretransform with Android screen orientation
  * Add settings file sample and documentation
  * Update header to 1.2.148

  [ John Zupin ]
  * copyright: updated for lunarg debian files
  * patch: gfxrcon-toascii updated for 148 package
  * patch: updated to patch focal to version

 -- John Zupin <john@odin>  Mon, 27 Jul 2020 17:38:53 -0600

gfxreconstruct (0.9.0+19-0ubuntu18.04) bionic; urgency=medium

  [ David Pinedo ]
  * Change USAGE documents heading

  [ Dustin Graves ]
  * Fix incomplete block at EOF false positive

  [ John Zupin ]
  * control: renamed gfxreconstruct to lunarg-gfxreconstruct

  [ David Pinedo ]
  * Don't allow Cygwin Python for gfxrecon-capture.py

  [ John Zupin ]
  * copyright: updated date

  [ David Pinedo ]
  * Minor usage documenation edits
  * Remove 'python' from cmd line in instructions for running py scripts

  [ Dustin Graves ]
  * Treat sdk branch as release branch
  * Fix size_t to int conversion in compression code

 -- John Zupin <john@odin>  Thu, 04 Jun 2020 18:43:38 -0600

gfxreconstruct (0.9.0+12-0ubuntu18.04) bionic; urgency=medium

  [ Dustin Graves ]
  * Set version to 0.9.1
  * Use ZSTD_compressBound function

  [ David Pinedo ]
  * Use os.path.join in gfxrecon.py script
  * Remove unneeded imports from python scripts

  [ John Zupin ]
  * copyright: initial update

  [ Dustin Graves ]
  * Fix null assignment in gfxrecon-info
  * Fix incomplete block header check
  * Add missing member initialization

  [ David Pinedo ]
  * Documentation changes for SDK release

  [ Dustin Graves ]
  * Documentation cleanup
  * Replace alt signal stack with SA_ONSTACK override
  * Update header to 1.2.136
  * Update header to 1.2.141

 -- John Zupin <john@odin>  Mon, 01 Jun 2020 19:16:05 -0600

gfxreconstruct (0.9.0-0ubuntu18.04) bionic; urgency=medium

  [ Dustin Graves ]
  * Set version to 0.9.0

  [ Mike Schuchardt ]
  * Tell clang-format to ignore generated directory
  * Track command buffer handles inside structs

  [ Dustin Graves ]
  * Fixes for clang-tidy issues from util code
  * Address compiler warnings
  * Enable warnings as errors for desktop builds
  * Update Xcb event sequence no comparison logic
  * Warn for VK_INCOMPLETE on replay

  [ xooi ]
  * Add hotkey trim trigger functions
  * Implement trim hotkey trigger in Linux

  [ Dustin Graves ]
  * Add file lock for trimming state snapshot
  * Override default F10 key behavior on Windows
  * Store additional object info in handle map
  * Use HandlePointerDecoder memory for output handles
  * Pointer decoders manage output param allocation
  * Pass PointerDecoder to override funcs
  * Pass handle info struct to replay overrides
  * Add object info structs to object mapper
  * Move replay data to handle info structs
  * Fix vkMapMemory capture with VK_WHOLE_SIZE
  * Use non-stream LZ4 compress/decompress calls
  * Remove try-catch blocks from compression code
  * Add fullscreen exclusive win32 replay support
  * Fix command tracking warnings
  * Remove the page guard lazy copy option
  * Add persistent memory page guard option
  * Use bitwise operations with page size calculations
  * Add buffer size alignment page guard option
  * Update page guard interface for imported memory
  * Add AHardwareBuffer support
  * Add AHB creation to trim state snapshot
  * Remove persistent shadow memory table
  * Make all VulkanConsumer methods empty functions
  * Add a gfxrecon-info command line utility

  [ David Pinedo ]
  * Fix encode/decode of wchar_t strings

  [ Dustin Graves ]
  * Ensure 16-bit encode/decode for LPCWSTR
  * Add trimming support for bind2 calls
  * Add support for Zstandard compression
  * Case insensitive arg comparison for gfxrecon-compress
  * Fix enum util declarations
  * Fix Android replay crash on error
  * Initial memory allocator implementation
  * Integrate memory allocator with replay consumer
  * Add memory type index remapping
  * Record device memory reqs before device creation
  * Remove redundant memory prop tracking
  * Override physical device memory property replay
  * Expand allocator interface for resource creation
  * Add VMA dependency
  * Initial rebind allocator implementation
  * Mapped memory write remap for rebind allocator
  * Add rebind support for bind buffer2/image2
  * Add rebind support for flush/invalidate ranges
  * Decouple replay consumer and resource allocator
  * Update trim file replay for memory portability
  * Handle image row alignment mismatch on replay
  * Add --memory-translation replay option
  * Add missing resource queries to trim state
  * Add phys device memory props to trim state
  * Report replay memory incompatibility

  [ Greg Fischer ]
  * Replace shader feature

  [ Mike Schuchardt ]
  * Dynamically load linux windowing libs for replay
  * Linux replay wsi fallback
  * Add replay argument for WSI selection

  [ Greg Fischer ]
  * Shader extract feature
  * Use handle id in filename for shader extract and replace.

  [ Mike Schuchardt ]
  * Move platform keyboard code into util
  * dlopen xcb-keysyms.so for XCB hotkey capture
  * Add hotkey support for Xlib via XCB
  * Improve hotkey capture error messages

  [ Dustin Graves ]
  * Fix const behavior for consumer classes
  * Use pointer decoder output memory for handles
  * On demand replay handle memory allocation
  * Return replay size from enum phys devices override
  * Store variable array counts on replay
  * Adjust variable array size on replay
  * Conditional allocation for replay outputs
  * Update to 1.2.134 header
  * Add vkGetPhysicalDeviceToolPropertiesEXT support
  * Cleanup capture layer code
  * Set layer version to project version
  * Conditionally use SA_ONSTACK with sigaction

  [ Greg Fischer ]
  * Fix usage for gfxrecon-extract and gfxrecon --replace shaders.

  [ Mike Schuchardt ]
  * Scale replay wayland surface to match output
  * Add fullscreen support for wayland replay
  * Use reinterpret_cast in wayland loader util

  [ Dustin Graves ]
  * Record phys device props before device creation
  * Handle available physical device differences
  * Fix trim issue with non-zero memory offsets
  * Fix rebind memory translation offsets
  * Add replay memory allocation index check
  * Keep dGPU allocations host visible on rebind
  * Adjust loader search order
  * Build platform XLIB_XRANDR without XLIB
  * Ensure CheckLibraryExists.cmake is included
  * Eliminate duplicate handle mapping code
  * Add missing logging.h include

  [ John Zupin ]
  * Add CMake install rules

  [ Dustin Graves ]
  * Fix replay for image/buffer destroy w/null handle
  * Use sys.executable to invoke Python
  * Track descriptor set dependencies for trim

  [ David Pinedo ]
  * Initial launcher script implementations

  [ Dustin Graves ]
  * Fix 32-bit debug build warning
  * Update extract consumer interface

  [ Bob Ellison ]
  * Update docs for Clang Format v9

  [ Dustin Graves ]
  * Update BUILD and CONTRIBUTING docs
  * Add 32-bit Linux build instructions

  [ David Pinedo ]
  * Renamed layer json file to VkLayer_gfxreconstruct.json

  [ Dustin Graves ]
  * Update for ClangFormat v9

  [ Mike Schuchardt ]
  * Fix path quoting in json generator

  [ John Zupin ]
  * UNRELEASED

 -- John Zupin <john@odin>  Fri, 22 May 2020 17:18:53 -0600

gfxreconstruct (0.8.1-1) unstable; urgency=medium

  * Initial package build for testing

 -- John Zupin <johnz@lunarg.com>  Wed, 20 May 2020 10:59:54 -0600
